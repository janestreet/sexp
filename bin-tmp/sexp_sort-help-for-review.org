* sexp_sort.exe

: Sort a list of s-expressions
: 
:   sexp_sort.exe 
: 
: Sorts a list of s-expressions. The sort key be specified in a variety of formats:
: a field name, a query as used for sexp query, a pattern as used for sexp pat-query,
: a path as used for sexp get, or a CSS-style program as used for sexp select.
: 
: To sort by multiple keys, you have several options. If you want to use the same
: kind of sort for each key, and you want to specify how to access each key in the
: same way, then you can repeatedly specify a flag, e.g., `-field foo -field bar`,
: or `-get .a.b -get .m.n -get .y.z`.
: 
: If you want to sort by multiple keys, and use different specifiers for each, or
: if you want to use different types of sorts for multiple keys, e.g., sort one key
: as a string, and another key as a number but in descending order, you have to use
: the special "-key" flag:
: 
: To use the "-key" flag, pass a string of the form "<access_kind><modifiers>:<arg>",
: where:
:   - <access_kind> is one of (field|index|query|pat-query|get|select)
:   - <modifiers> are optional strings to control specific sort behavior for that column.
:     Each modifier is prefixed with a '/'. Options are:
:       asc  -> sort in ascending order (default)
:       desc -> sort in descending (reverse) order
:       rev  -> sort in reverse order
:       nat  -> use natural sort
:       num  -> use numeric sort
:       str  -> use string sort (default)
:       s    -> use case-sensitive sort (default)
:       i    -> use case-insensitive sort
:   - <arg> is the arg you would pass to the equivalent "-<access_kind>" flag.
: 
: For example, if you have sexps of users with names and ages:
:   ((name ((first <first_name>) (last <last_name>))) (age <age>))
: 
: then you can sort them age, oldest first, then last name using:
: 
:   sexp sort -key "field/num/desc:age" -key "get:.name.last"
: 
: 
: A note on -reverse: -reverse inverts the result of comparisons, rather than
: reversing the final output, which may lead to slightly unexpected behavior when
: combined with -unique. This matches the behavior of the unix sort command.
: 
: === flags ===
: 
:   [-field FIELD] ...         . Sort by the value associated with this field
:   [-get PATH] ...            . Sort by the values referenced by this path, as
:                                used in sexp get
:   [-ignore-case]             . ignore case when sorting
:   [-index INDEX] ...         . Sort by the value at this index in the top-level
:                                of a sexp
:   [-key KEY] ...             . Sort by the key
:   [-machine]                 . Use machine style for output (one sexp per line)
:   [-natural]                 . Use natural sort, i.e., "z2" comes before "z10"
:   [-numeric], -n             . Treat sort keys as numbers (keys must be atoms)
:   [-pat-query PATTERN] ...   . Sort by the values reference by this query, as
:                                used in sexp pat-query
:   [-query QUERY] ...         . Sort by the values referenced by this query, as
:                                used in sexp query
:   [-reverse], -descending    . Reverse the result of the comparisons
:   [-select PATH] ...         . Sort by the values referenced by this path, as
:                                used in sexp select
:   [-unique]                  . Output just the first of consecutive sexps with
:                                equal keys
:   [-build-info]              . print info about this build and exit
:   [-version]                 . print the version of this build and exit
:   [-help], -?                . print this help text and exit
